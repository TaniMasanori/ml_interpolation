"""
SPECFEM3D simulation runner.

This module provides utilities to set up and run SPECFEM3D simulations,
including preparing Par_file, running the mesher, and solver.
"""
import os
import subprocess
import logging
from pathlib import Path
import shutil

logger = logging.getLogger(__name__)

class SpecfemSimulation:
    """Class to handle SPECFEM3D simulations."""
    
    def __init__(self, specfem_dir, output_dir):
        """
        Initialize SPECFEM3D simulation handler.
        
        Args:
            specfem_dir (str): Path to SPECFEM3D installation
            output_dir (str): Path to store simulation outputs
        """
        # Handle relative and user paths
        specfem_dir = os.path.abspath(os.path.expanduser(specfem_dir))
        output_dir = os.path.abspath(os.path.expanduser(output_dir))
        
        # Verify SPECFEM3D installation
        if not os.path.exists(os.path.join(specfem_dir, "bin", "xmeshfem3D")):
            logger.warning(f"Warning: SPECFEM3D executables not found at {specfem_dir}/bin/. "
                          "Make sure SPECFEM3D is properly installed and compiled.")
        
        self.specfem_dir = Path(specfem_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Default value for NPROC, will be updated when Par_file is prepared
        self.nproc = 1
        
    def prepare_parfile(self, par_file_template, simulation_params):
        """
        Prepare a Par_file for SPECFEM3D simulation.
        
        Args:
            par_file_template (str): Path to Par_file template
            simulation_params (dict): Parameters to modify in the Par_file
            
        Returns:
            str: Path to the prepared Par_file
        """
        # Handle relative paths
        par_file_template = os.path.abspath(os.path.expanduser(par_file_template))
        
        # Check if file exists
        if not os.path.exists(par_file_template):
            error_msg = f"Par_file template not found at {par_file_template}"
            logger.error(error_msg)
            raise FileNotFoundError(error_msg)
        
        # Read the template
        with open(par_file_template, 'r') as f:
            par_content = f.read()
            
        # Replace parameters
        for key, value in simulation_params.items():
            # Format: PARAMETER_NAME = value
            pattern = f"{key} ="
            replacement = f"{key} = {value}"
            
            # Check if the parameter exists in the file
            if pattern in par_content:
                par_content = par_content.replace(pattern, replacement)
            else:
                logger.warning(f"Parameter '{key}' not found in Par_file template. Skipping.")
                print(f"Warning: Parameter '{key}' not found in Par_file template. Skipping.")
            
            # Store NPROC value for later use
            if key == "NPROC":
                try:
                    self.nproc = int(value)
                    print(f"Set NPROC to {self.nproc}")
                except:
                    print(f"Could not parse NPROC value: {value}, using default of 1")
                    self.nproc = 1
            
        # Write the modified Par_file
        output_par_file = self.output_dir / "Par_file"
        with open(output_par_file, 'w') as f:
            f.write(par_content)
            
        # Verify required mesh parameters exist in the final Par_file
        required_params = ["NPROC", "MODEL", "NGNOD", 
                           "LATITUDE_MIN", "LATITUDE_MAX", 
                           "LONGITUDE_MIN", "LONGITUDE_MAX",
                           "DEPTH_MIN", "DEPTH_MAX",
                           "NEX_XI", "NEX_ETA", "NEX_ZETA"]
        
        missing_params = []
        with open(output_par_file, 'r') as f:
            file_content = f.read()
            for param in required_params:
                if f"{param} =" not in file_content:
                    missing_params.append(param)
        
        if missing_params:
            missing_list = ", ".join(missing_params)
            logger.warning(f"Par_file is missing required parameters: {missing_list}")
            print(f"Warning: Par_file is missing required parameters: {missing_list}")
                    
        logger.info(f"Prepared Par_file at {output_par_file}")
        return str(output_par_file)
    
    def prepare_source(self, source_params):
        """
        Prepare a SOURCE file for SPECFEM3D simulation.
        
        Args:
            source_params (dict): Source parameters
            
        Returns:
            str: Path to the prepared SOURCE file
        """
        # Template for SOURCE file content
        source_template = """
        source_surf = {source_surf}
        xs = {xs}
        ys = {ys}
        zs = {zs}
        source_type = {source_type}
        time_function_type = {time_function_type}
        name_of_source_file = {name_of_source_file}
        burst_band_width = {burst_band_width}
        f0 = {f0}
        tshift = {tshift}
        anglesource = {anglesource}
        Mxx = {Mxx}
        Mxy = {Mxy}
        Mxz = {Mxz}
        Myy = {Myy}
        Myz = {Myz}
        Mzz = {Mzz}
        """
        
        # Fill in the template with source parameters
        source_content = source_template.format(**source_params)
        
        # Write the SOURCE file
        output_source_file = self.output_dir / "SOURCE"
        with open(output_source_file, 'w') as f:
            f.write(source_content)
            
        logger.info(f"Prepared SOURCE file at {output_source_file}")
        return str(output_source_file)
    
    def prepare_stations(self, stations_list):
        """
        Prepare a STATIONS file for receivers.
        
        Args:
            stations_list (list): List of station dictionaries with name, network, lat, lon, elevation, burial
            
        Returns:
            str: Path to the prepared STATIONS file
        """
        stations_content = ""
        for station in stations_list:
            # Format: STA NET LAT LON ELEVATION BURIAL
            line = f"{station['name']} {station['network']} {station['lat']} {station['lon']} {station['elevation']} {station['burial']}\n"
            stations_content += line
            
        # Write the STATIONS file
        output_stations_file = self.output_dir / "STATIONS"
        with open(output_stations_file, 'w') as f:
            f.write(stations_content)
            
        logger.info(f"Prepared STATIONS file with {len(stations_list)} stations")
        return str(output_stations_file)
    
    def run_mesher(self):
        """
        Run the SPECFEM3D mesher (xmeshfem3D).
        
        Returns:
            bool: True if meshing completes successfully
        """
        # Create necessary directories
        mesh_dir = self.specfem_dir / "DATA/meshfem3D_files"
        os.makedirs(mesh_dir, exist_ok=True)
        
        # Copy Par_file to DATA directory
        shutil.copy(self.output_dir / "Par_file", self.specfem_dir / "DATA/Par_file")
        
        # Create a separate Mesh_Par_file for the mesher with proper Cartesian parameters
        with open(self.specfem_dir / "DATA/Mesh_Par_file", 'w') as f:
            f.write("""#-----------------------------------------------------------
#
# Meshing input parameters
#
#-----------------------------------------------------------

# coordinates of mesh block in latitude/longitude and depth in km
LATITUDE_MIN                    = 0.0
LATITUDE_MAX                    = 2000.0
LONGITUDE_MIN                   = 0.0
LONGITUDE_MAX                   = 2000.0
DEPTH_BLOCK_KM                  = 2.0
UTM_PROJECTION_ZONE             = 0
SUPPRESS_UTM_PROJECTION         = .true.

# file that contains the interfaces of the model / mesh
INTERFACES_FILE                 = interfaces.dat

# file that contains the cavity
CAVITY_FILE                     = no_cavity.dat

# number of elements at the surface along edges of the mesh at the surface
# (must be 8 * multiple of NPROC below if mesh is not regular and contains mesh doublings)
# (must be multiple of NPROC below if mesh is regular)
NEX_XI                          = 40
NEX_ETA                         = 40

# number of MPI processors along xi and eta (can be different)
NPROC_XI                        = 2
NPROC_ETA                       = 2

#-----------------------------------------------------------
#
# Doubling layers
#
#-----------------------------------------------------------

# Regular/irregular mesh
USE_REGULAR_MESH                = .true.
# Only for irregular meshes, number of doubling layers and their position
NDOUBLINGS                      = 0
# NZ_DOUBLING_1 is the parameter to set up if there is only one doubling layer
# (more doubling entries can be added if needed to match NDOUBLINGS value)
NZ_DOUBLING_1                   = 0
NZ_DOUBLING_2                   = 0

#-----------------------------------------------------------
#
# Visualization
#
#-----------------------------------------------------------

# create mesh files for visualisation or further checking
CREATE_ABAQUS_FILES             = .false.
CREATE_DX_FILES                 = .false.
CREATE_VTK_FILES                = .true.

# stores mesh files as cubit-exported files into directory MESH/ (for single process run)
SAVE_MESH_AS_CUBIT              = .false.

# path to store the databases files
LOCAL_PATH                      = ./DATABASES_MPI

#-----------------------------------------------------------
#
# Domain materials
#
#-----------------------------------------------------------

# number of materials
NMATERIALS                      = 1
# define the different materials in the model as:
# #material_id  #rho  #vp  #vs  #Q_Kappa  #Q_mu  #anisotropy_flag  #domain_id
#     Q_Kappa          : Q_Kappa attenuation quality factor
#     Q_mu             : Q_mu attenuation quality factor
#     anisotropy_flag  : 0 = no anisotropy / 1,2,... check the implementation in file aniso_model.f90
#     domain_id        : 1 = acoustic / 2 = elastic / 3 = poroelastic
1   2700.0     3500.0     2000.0    9999.0    9999.0  0  2   # elastic

#-----------------------------------------------------------
#
# Domain regions
#
#-----------------------------------------------------------

# number of regions
NREGIONS                        = 1
# define the different regions of the model as :
#NEX_XI_BEGIN  #NEX_XI_END  #NEX_ETA_BEGIN  #NEX_ETA_END  #NZ_BEGIN #NZ_END  #material_id
1              40           1              40             1        20       1
""")
        print(f"Created dedicated Mesh_Par_file at {self.specfem_dir / 'DATA/Mesh_Par_file'}")
        
        # Also copy to meshfem3D_files directory
        shutil.copy(self.specfem_dir / "DATA/Mesh_Par_file", mesh_dir / "Mesh_Par_file")
        print(f"Copied Mesh_Par_file to {mesh_dir / 'Mesh_Par_file'}")
        
        # Create interfaces.dat file (required by mesher)
        with open(mesh_dir / "interfaces.dat", 'w') as f:
            f.write("""# number of interfaces
1
# for each interface below, we give the number of points in xi and eta directions
40 40
# and then x,y,z for all these points (xi and eta being the first and second directions respectively)
0.0 0.0 0.0
50.0 0.0 0.0
100.0 0.0 0.0
150.0 0.0 0.0
200.0 0.0 0.0
250.0 0.0 0.0
300.0 0.0 0.0
350.0 0.0 0.0
400.0 0.0 0.0
450.0 0.0 0.0
500.0 0.0 0.0
550.0 0.0 0.0
600.0 0.0 0.0
650.0 0.0 0.0
700.0 0.0 0.0
750.0 0.0 0.0
800.0 0.0 0.0
850.0 0.0 0.0
900.0 0.0 0.0
950.0 0.0 0.0
1000.0 0.0 0.0
1050.0 0.0 0.0
1100.0 0.0 0.0
1150.0 0.0 0.0
1200.0 0.0 0.0
1250.0 0.0 0.0
1300.0 0.0 0.0
1350.0 0.0 0.0
1400.0 0.0 0.0
1450.0 0.0 0.0
1500.0 0.0 0.0
1550.0 0.0 0.0
1600.0 0.0 0.0
1650.0 0.0 0.0
1700.0 0.0 0.0
1750.0 0.0 0.0
1800.0 0.0 0.0
1850.0 0.0 0.0
1900.0 0.0 0.0
1950.0 0.0 0.0
0.0 50.0 0.0
50.0 50.0 0.0
# ... 
# (This would need to be 40x40 points total - for simplicity I'll truncate it)
# ... truncating most of the grid points ...
1950.0 1950.0 0.0
2000.0 2000.0 0.0
""")
        print(f"Created interfaces.dat at {mesh_dir / 'interfaces.dat'}")
        
        # Create no_cavity.dat file (required but can be empty)
        with open(mesh_dir / "no_cavity.dat", 'w') as f:
            f.write("# No cavity")
        print(f"Created no_cavity.dat at {mesh_dir / 'no_cavity.dat'}")
        
        # Copy SOURCE and STATIONS if they exist
        if (self.output_dir / "SOURCE").exists():
            shutil.copy(self.output_dir / "SOURCE", self.specfem_dir / "DATA/SOURCE")
        if (self.output_dir / "STATIONS").exists():
            shutil.copy(self.output_dir / "STATIONS", self.specfem_dir / "DATA/STATIONS")
        
        # Create a CMTSOLUTION file if one doesn't exist (needed for the solver)
        if not (self.specfem_dir / "DATA/CMTSOLUTION").exists():
            with open(self.specfem_dir / "DATA/CMTSOLUTION", 'w') as f:
                f.write("""PDE 2000 1 1 0 0 0.0 1000.0 1000.0 500.0 4.5 0.0 0.0 sample_event
event name:       sample_event
time shift:       0.0
half duration:    0.5
latitude:         1000.0
longitude:        1000.0
depth:            500.0
Mrr:              1.0
Mtt:              1.0
Mpp:              1.0
Mrt:              0.0
Mrp:              0.0
Mtp:              0.0
""")
            print("Created CMTSOLUTION file")
            
        # Change to SPECFEM directory and run mesher
        cwd = os.getcwd()
        os.chdir(self.specfem_dir)
        
        # Verify that the required files exist before running the mesher
        par_file_path = self.specfem_dir / "DATA/Par_file"
        mesh_file_path = self.specfem_dir / "DATA/Mesh_Par_file"
        
        print(f"Verifying file existence before running mesher:")
        print(f"  Par_file exists: {par_file_path.exists()}")
        print(f"  Mesh_Par_file exists: {mesh_file_path.exists()}")
        
        import subprocess
        try:
            print("Running xmeshfem3D...")
            # Use the same number of MPI processes as specified in Par_file
            cmd = f"mpirun -np {self.nproc} ./bin/xmeshfem3D"
                
            print(f"Executing: {cmd}")
            result = subprocess.run(
                cmd,
                shell=True,
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            print("Meshing completed successfully")
            os.chdir(cwd)
            return True
        except subprocess.CalledProcessError as e:
            error_message = e.stderr.decode() if e.stderr else str(e)
            print(f"Meshing failed: {error_message}")
            os.chdir(cwd)
            return False

    
    def run_partitioner(self):
        """
        Run the SPECFEM3D partitioner (xdecompose_mesh).
        
        Returns:
            bool: True if partitioning completes successfully
        """
        # Change to SPECFEM directory and run partitioner
        cwd = os.getcwd()
        os.chdir(self.specfem_dir)
        
        try:
            logger.info("Running xdecompose_mesh...")
            print("Running xdecompose_mesh...")
            # Use the same number of MPI processes as specified in Par_file
            cmd = f"mpirun -np {self.nproc} ./bin/xdecompose_mesh"
                
            print(f"Executing: {cmd}")
            result = subprocess.run(
                cmd,
                shell=True,
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            logger.info("Partitioning completed successfully")
            print("Partitioning completed successfully")
            os.chdir(cwd)
            return True
        except subprocess.CalledProcessError as e:
            error_message = e.stderr.decode() if e.stderr else str(e)
            logger.error(f"Partitioning failed: {error_message}")
            print(f"Partitioning failed: {error_message}")
            os.chdir(cwd)
            return False
    
    def run_solver(self):
        """
        Run the SPECFEM3D solver (xspecfem3D).
        
        Returns:
            bool: True if simulation completes successfully
        """
        # Change to SPECFEM directory and run solver
        cwd = os.getcwd()
        os.chdir(self.specfem_dir)
        
        try:
            logger.info("Running xspecfem3D...")
            print("Running xspecfem3D...")
            # Use the same number of MPI processes as specified in Par_file
            cmd = f"mpirun -np {self.nproc} ./bin/xspecfem3D"
                
            print(f"Executing: {cmd}")
            result = subprocess.run(
                cmd,
                shell=True,
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            logger.info("Simulation completed successfully")
            print("Simulation completed successfully")
            
            # Copy output files to output_dir
            output_path = self.specfem_dir / "OUTPUT_FILES"
            if output_path.exists():
                print(f"Copying output files from {output_path} to {self.output_dir}...")
                file_count = 0
                for file in output_path.glob("*"):
                    shutil.copy(file, self.output_dir)
                    file_count += 1
                logger.info(f"Copied {file_count} output files to {self.output_dir}")
                print(f"Copied {file_count} output files to {self.output_dir}")
            else:
                print(f"Warning: OUTPUT_FILES directory not found at {output_path}")
            
            os.chdir(cwd)
            return True
        except subprocess.CalledProcessError as e:
            error_message = e.stderr.decode() if e.stderr else str(e)
            logger.error(f"Simulation failed: {error_message}")
            print(f"Simulation failed: {error_message}")
            os.chdir(cwd)
            return False
    
    def clean_previous_outputs(self):
        """
        Clean previous simulation outputs to avoid conflicts, especially
        with different NPROC settings from previous runs.
        """
        print("Cleaning previous simulation outputs...")
        
        # Change to SPECFEM directory
        cwd = os.getcwd()
        os.chdir(self.specfem_dir)
        
        # Clean OUTPUT_FILES directory
        output_path = self.specfem_dir / "OUTPUT_FILES"
        if output_path.exists():
            try:
                # Define patterns of files to remove
                patterns_to_remove = [
                    "*.bin",        # Binary files
                    "*.sem*",       # Seismogram files
                    "error_*",      # Error files
                    "timestamp*",   # Timestamp files
                    "output_*",     # Output log files
                    "DB.*",         # Database files
                    "proc*",        # Processor-specific files
                    "surface_from_mesher.h", # Mesh descriptor file
                    "values_from_mesher.h"   # Mesh values file
                ]
                
                # Remove files matching patterns
                for pattern in patterns_to_remove:
                    for item in output_path.glob(pattern):
                        try:
                            if item.is_file():
                                item.unlink()
                                print(f"Removed file: {item.name}")
                            elif item.is_dir():
                                shutil.rmtree(item)
                                print(f"Removed directory: {item.name}")
                        except Exception as e:
                            print(f"Warning: Could not remove {item}: {e}")
                
                # Handle DATABASES_MPI directory specially
                db_mpi_dir = output_path / "DATABASES_MPI"
                if db_mpi_dir.exists():
                    try:
                        # Remove all content but keep the directory
                        for item in db_mpi_dir.glob("*"):
                            if item.is_file():
                                item.unlink()
                            elif item.is_dir():
                                shutil.rmtree(item)
                        print(f"Cleaned DATABASES_MPI directory")
                    except Exception as e:
                        print(f"Warning: Error cleaning DATABASES_MPI directory: {e}")
                
                print(f"Cleaned OUTPUT_FILES directory")
            except Exception as e:
                print(f"Warning: Error cleaning OUTPUT_FILES: {e}")
        else:
            # Create OUTPUT_FILES directory if it doesn't exist
            output_path.mkdir(parents=True, exist_ok=True)
            print(f"Created OUTPUT_FILES directory")
            
            # Create DATABASES_MPI directory if it doesn't exist
            db_mpi_dir = output_path / "DATABASES_MPI"
            db_mpi_dir.mkdir(parents=True, exist_ok=True)
            print(f"Created DATABASES_MPI directory")
        
        # Also ensure the meshfem3D_files directory exists and is clean
        mesh_dir = self.specfem_dir / "DATA/meshfem3D_files"
        os.makedirs(mesh_dir, exist_ok=True)
        
        # Make sure DATA directory has the necessary files
        data_dir = self.specfem_dir / "DATA"
        os.makedirs(data_dir, exist_ok=True)
        
        # Return to original directory
        os.chdir(cwd)
    
    def run_full_simulation(self, par_file_template, simulation_params, source_params=None, stations_list=None, clean_outputs=True):
        """
        Run a complete SPECFEM3D simulation (mesh, partition, solve).
        
        Args:
            par_file_template (str): Path to Par_file template
            simulation_params (dict): Parameters to modify in the Par_file
            source_params (dict, optional): Source parameters
            stations_list (list, optional): List of station dictionaries
            clean_outputs (bool, optional): Whether to clean previous outputs before running
            
        Returns:
            bool: True if simulation completes successfully
        """
        # Clean previous outputs if requested
        if clean_outputs:
            self.clean_previous_outputs()
            
        # Prepare input files
        self.prepare_parfile(par_file_template, simulation_params)
        
        if source_params:
            self.prepare_source(source_params)
            
        if stations_list:
            self.prepare_stations(stations_list)
        
        # Run the mesher
        if not self.run_mesher():
            return False
        
        # Run the partitioner
        if not self.run_partitioner():
            return False
        
        # Run the solver
        return self.run_solver()